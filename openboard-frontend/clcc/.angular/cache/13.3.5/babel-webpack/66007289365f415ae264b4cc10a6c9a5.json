{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.AUTH_SIGNUP_URL = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=';\n      this.AUTH_SIGNIN_URL = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=';\n      this.AUTH_API_KEY = 'AIzaSyCHZLEmFGsPJ_ZcMOpxZW0k0mWJUUsjlXU';\n      this.SEC_TOKEN_NAME = 'clcc-openboard-user-data'; //user:Subject<User>=new Subject<User>();\n\n      this.user = new BehaviorSubject(null);\n    }\n\n    autoLogin() {\n      const user = JSON.parse(localStorage.getItem(this.SEC_TOKEN_NAME));\n\n      if (!user) {\n        return;\n      }\n\n      const loggedInUser = new User(user.email, user.Id, user._token, new Date(user._tokenExpirationDate));\n\n      if (loggedInUser.token) {\n        this.user.next(loggedInUser);\n        const expiredIn = new Date(user._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expiredIn);\n      }\n    }\n\n    logout() {\n      this.user.next(null);\n      this.router.navigate(['/auth']);\n      localStorage.removeItem(this.SEC_TOKEN_NAME);\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n\n      this.tokenExpirationTimer = null;\n    }\n\n    autoLogout(expirationDuration) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logout();\n      }, expirationDuration);\n    }\n\n    signup(email, password) {\n      return this.http.post(this.AUTH_SIGNUP_URL + this.AUTH_API_KEY, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(respData => {\n        this.handleAuthencation(respData.email, respData.localId, respData.idToken, +respData.expiresIn);\n      }));\n    }\n\n    signin(email, password) {\n      return this.http.post(this.AUTH_SIGNIN_URL + this.AUTH_API_KEY, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(respData => {\n        this.handleAuthencation(respData.email, respData.localId, respData.idToken, +respData.expiresIn);\n      }));\n    }\n\n    handleAuthencation(email, id, token, expiresIn) {\n      const tokenExpirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(email, id, token, tokenExpirationDate);\n      this.user.next(user);\n      localStorage.setItem(this.SEC_TOKEN_NAME, JSON.stringify(user));\n      this.autoLogout(expiresIn * 1000);\n    }\n\n    handleError(errorResp) {\n      let errorMessage = \"Unknown error occured!\";\n      console.log(errorResp);\n      console.log(errorResp.error.error.message);\n\n      if (!errorResp.error || !errorResp.error.error) {\n        return throwError(errorMessage);\n      }\n\n      console.log(errorResp);\n      console.log(errorResp.error.error.message);\n\n      switch (errorResp.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = \"Email already exist!\";\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = \"Invalid email address!\";\n          break;\n\n        case \"INVALID_PASSWORD\":\n          errorMessage = \"Invalid password!\";\n          break;\n\n        default:\n          break;\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}