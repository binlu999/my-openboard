{"ast":null,"code":"import { exhaustMap, map, take } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let AuthInterceptorService = /*#__PURE__*/(() => {\n  class AuthInterceptorService {\n    constructor(store) {\n      this.store = store;\n    }\n\n    intercept(req, next) {\n      return this.store.select('auth').pipe(take(1), map(authState => {\n        return authState.user;\n      }), exhaustMap(user => {\n        if (!user) {\n          return next.handle(req);\n        }\n\n        let params = req.params;\n        const modifiedReq = req.clone({\n          params: params.append('auth', user.token)\n        });\n        return next.handle(modifiedReq);\n      }));\n    }\n\n  }\n\n  AuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n    return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.Store));\n  };\n\n  AuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptorService,\n    factory: AuthInterceptorService.ɵfac\n  });\n  return AuthInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}