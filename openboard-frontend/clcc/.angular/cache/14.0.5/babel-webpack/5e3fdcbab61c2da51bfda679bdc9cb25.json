{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from \"@ngrx/effects\";\nimport { map, switchMap, withLatestFrom } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport { ReceipeSetReceipes, RECEIPE_FETCH_RECEIPES, RECEIPE_SAVE_RECEIPES } from \"./receipe.actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@ngrx/store\";\nexport class ReceipeEffects {\n  constructor(actions$, http, store) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.store = store;\n    this.fetchReceipes = this.actions$.pipe(ofType(RECEIPE_FETCH_RECEIPES), switchMap(() => {\n      return this.http.get(environment.RECEIPE_STORE_URL);\n    }), map(receipes => {\n      return receipes.map(receipe => {\n        return Object.assign(Object.assign({}, receipe), {\n          ingredients: receipe.ingredients ? receipe.ingredients : []\n        });\n      });\n    }), map(receipes => {\n      return new ReceipeSetReceipes(receipes);\n    }));\n    this.saveReceipes = this.actions$.pipe(ofType(RECEIPE_SAVE_RECEIPES), withLatestFrom(this.store.select('receipes')), switchMap(([actionData, receipeState]) => {\n      return this.http.put(environment.RECEIPE_STORE_URL, receipeState.receipes);\n    }));\n  }\n\n}\n\nReceipeEffects.ɵfac = function ReceipeEffects_Factory(t) {\n  return new (t || ReceipeEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Store));\n};\n\nReceipeEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ReceipeEffects,\n  factory: ReceipeEffects.ɵfac\n});\n\n__decorate([Effect()], ReceipeEffects.prototype, \"fetchReceipes\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n})], ReceipeEffects.prototype, \"saveReceipes\", void 0);","map":null,"metadata":{},"sourceType":"module"}