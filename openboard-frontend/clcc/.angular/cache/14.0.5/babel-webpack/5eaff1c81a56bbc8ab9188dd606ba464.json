{"ast":null,"code":"import { AuthClearError, AuthLoginStart, AuthSignupStart } from './store/auth.action';\nimport { AlertComponent } from '../shared/alert/alert.component';\nimport { PlaceHolderDirective } from '../shared/placeholder/placeholder.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../shared/loading-spinner/loading-spinner.component\";\nimport * as i5 from \"../shared/placeholder/placeholder.directive\";\n\nfunction AuthComponent_ng_template_0_Template(rf, ctx) {}\n\nfunction AuthComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelement(1, \"app-loading-spinner\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let AuthComponent = /*#__PURE__*/(() => {\n  class AuthComponent {\n    constructor(componentfactoryResolver, store) {\n      this.componentfactoryResolver = componentfactoryResolver;\n      this.store = store;\n      this.isLoginMode = true;\n      this.isLoading = false;\n      this.error = null;\n    }\n\n    ngOnInit() {\n      this.storeSub = this.store.select('auth').subscribe(authState => {\n        this.isLoading = authState.isLoading;\n        this.error = authState.authError;\n\n        if (this.error) {\n          this.showErrorAlert(this.error);\n        }\n      });\n    }\n\n    onSwitchLoginMode() {\n      this.isLoginMode = !this.isLoginMode;\n    }\n\n    onSubmit(authForm) {\n      if (!authForm.valid) {\n        return;\n      }\n\n      const email = authForm.value.email;\n      const password = authForm.value.password;\n      this.error = null;\n\n      if (this.isLoginMode) {\n        this.store.dispatch(new AuthLoginStart({\n          email: email,\n          password: password\n        }));\n      } else {\n        this.store.dispatch(new AuthSignupStart({\n          email: email,\n          password: password\n        }));\n      }\n\n      authForm.reset();\n    }\n\n    closeError() {\n      this.store.dispatch(new AuthClearError());\n    }\n\n    showErrorAlert(message) {\n      const alertCmpFactory = this.componentfactoryResolver.resolveComponentFactory(AlertComponent);\n      const hostViewContainerRef = this.alertHost.viewContainerRef;\n      hostViewContainerRef.clear();\n      const componentRef = hostViewContainerRef.createComponent(alertCmpFactory);\n      componentRef.instance.message = message;\n      this.closeSub = componentRef.instance.closeMe.subscribe(() => {\n        this.closeSub.unsubscribe();\n        hostViewContainerRef.clear();\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.closeSub) {\n        this.closeSub.unsubscribe();\n      }\n\n      if (this.storeSub) {\n        this.storeSub.unsubscribe();\n      }\n    }\n\n  }\n\n  AuthComponent.ɵfac = function AuthComponent_Factory(t) {\n    return new (t || AuthComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i1.Store));\n  };\n\n  AuthComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthComponent,\n    selectors: [[\"app-auth\"]],\n    viewQuery: function AuthComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(PlaceHolderDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.alertHost = _t.first);\n      }\n    },\n    decls: 20,\n    vars: 4,\n    consts: [[\"appPlaceHolder\", \"\"], [1, \"row\"], [1, \"col-xs-12\", \"col-md-6\", \"col-md-offset-3\"], [\"style\", \"text-align: center;\", 4, \"ngIf\"], [3, \"ngSubmit\"], [\"authForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"ngModel\", \"\", \"name\", \"email\", \"required\", \"\", \"email\", \"\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"ngModel\", \"\", \"name\", \"password\", \"required\", \"\", \"minlength\", \"6\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [2, \"text-align\", \"center\"]],\n    template: function AuthComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r3 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵtemplate(0, AuthComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵtemplate(3, AuthComponent_div_3_Template, 2, 0, \"div\", 3);\n        i0.ɵɵelementStart(4, \"form\", 4, 5);\n        i0.ɵɵlistener(\"ngSubmit\", function AuthComponent_Template_form_ngSubmit_4_listener() {\n          i0.ɵɵrestoreView(_r3);\n\n          const _r2 = i0.ɵɵreference(5);\n\n          return i0.ɵɵresetView(ctx.onSubmit(_r2));\n        });\n        i0.ɵɵelementStart(6, \"div\", 6)(7, \"label\", 7);\n        i0.ɵɵtext(8, \"E-Mail\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 6)(11, \"label\", 9);\n        i0.ɵɵtext(12, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\")(15, \"button\", 11);\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(17, \" | \");\n        i0.ɵɵelementStart(18, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function AuthComponent_Template_button_click_18_listener() {\n          return ctx.onSwitchLoginMode();\n        });\n        i0.ɵɵtext(19);\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        const _r2 = i0.ɵɵreference(5);\n\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"disabled\", !_r2.valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.isLoginMode ? \"Login\" : \"Sign Up\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Switch to \", ctx.isLoginMode ? \"Sign up\" : \"Login\", \"\");\n      }\n    },\n    dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MinLengthValidator, i3.EmailValidator, i3.NgModel, i3.NgForm, i4.LoadingSpinnerComponent, i5.PlaceHolderDirective]\n  });\n  return AuthComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}