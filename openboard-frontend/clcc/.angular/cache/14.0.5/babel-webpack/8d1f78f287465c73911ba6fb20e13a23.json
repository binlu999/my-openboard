{"ast":null,"code":"import { of } from \"rxjs\";\nimport { ReceipeFetchReceipes, RECEIPE_SET_RECEIPES } from \"./store/receipe.actions\";\nimport { ofType } from \"@ngrx/effects\";\nimport { map, switchMap, take } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nexport let ReceipeResolverService = /*#__PURE__*/(() => {\n  class ReceipeResolverService {\n    constructor(store, actions$) {\n      this.store = store;\n      this.actions$ = actions$;\n    }\n\n    resolve(route, state) {\n      return this.store.select('receipes').pipe(take(1), map(receipeState => {\n        return receipeState.receipes;\n      }), switchMap(receipes => {\n        if (receipes.length === 0) {\n          this.store.dispatch(new ReceipeFetchReceipes());\n          return this.actions$.pipe(ofType(RECEIPE_SET_RECEIPES), take(1));\n        } else {\n          return of(receipes);\n        }\n      }));\n    }\n\n  }\n\n  ReceipeResolverService.ɵfac = function ReceipeResolverService_Factory(t) {\n    return new (t || ReceipeResolverService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions));\n  };\n\n  ReceipeResolverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReceipeResolverService,\n    factory: ReceipeResolverService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReceipeResolverService;\n})();","map":null,"metadata":{},"sourceType":"module"}